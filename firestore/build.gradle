apply plugin: 'kotlin-multiplatform'
apply plugin: 'org.jetbrains.kotlin.native.cocoapods'
apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.dokka'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.androidTools

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions.unitTests.includeAndroidResources = true
}

group = GROUP
version = VERSION_NAME

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.13'
}

dokka {
    impliedPlatforms = ["Common"] // This will force platform tags for all non-common sources e.g. "JVM"
    kotlinTasks {
        // dokka fails to retrieve sources from MPP-tasks so they must be set empty to avoid exception
        // use sourceRoot instead (see below)
        []
    }
    /*packageOptions {
        prefix = "com.squareup.sqldelight.internal"
        suppress = true
    }*/
    sourceRoot {
        // assuming there is only a single source dir...
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
    /*if (kotlin.sourceSets.getNames().contains("jvmMain")) {
        sourceRoot {
            // assuming there is only a single source dir...
            path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
            platforms = ["JVM"]
        }
    }
    if (kotlin.sourceSets.getNames().contains("jsMain")) {
        sourceRoot {
            // assuming there is only a single source dir...
            path = kotlin.sourceSets.jsMain.kotlin.srcDirs[0]
            platforms = ["js"]
        }
    }
    if (kotlin.sourceSets.getNames().contains("nativeMain")) {
        sourceRoot {
            // assuming there is only a single source dir...
            path = kotlin.sourceSets.nativeMain.kotlin.srcDirs[0]
            platforms = ["native"]
        }
    }*/
}

kotlin {

    android {
        publishAllLibraryVariants()
    }

    iosArm64()
    iosX64()

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "co.touchlab:stately-common:${versions.stately}"
                implementation "co.touchlab:stately-concurrency:${versions.stately}"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${versions.coroutines}"
            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        androidMain {
            dependsOn commonMain
            dependencies {
                implementation kotlin('stdlib')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"
                implementation "com.google.firebase:firebase-firestore:${versions.firebaseFirestoreAndroid}"
                implementation "com.google.firebase:firebase-core:${versions.firebaseCoreAndroid}"
            }
        }

        androidTest {
            dependsOn commonTest
            dependencies {
                implementation kotlin("test")
                implementation kotlin("test-junit")
                implementation 'junit:junit:4.13'
                implementation "androidx.test:core:1.2.0"
                implementation "androidx.test.ext:junit:1.1.1"
            }
        }

        iosMain {
            dependsOn commonMain
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${versions.coroutines}"
            }
        }

        iosTest {
            dependsOn commonTest
        }

        configure([targets.iosX64,
                   targets.iosArm64
        ]) {
            compilations.main.source(sourceSets.iosMain)
            compilations.test.source(sourceSets.iosTest)
            compilations["main"].cinterops {
                firebasecore {
                    packageName 'cocoapods.FirebaseCore'
                    defFile = file("$projectDir/src/iosMain/c_interop/FirebaseCore.def")
                    includeDirs ("$projectDir/../iosApp/Pods/FirebaseCore/Firebase/Core/Public")
                    compilerOpts ("-F$projectDir/src/iosMain/c_interop/modules/FirebaseCore-${versions.firebaseCoreIos}")
                }
                firestore {
                    packageName 'cocoapods.FirebaseFirestore'
                    defFile = file("$projectDir/src/iosMain/c_interop/FirebaseFirestore.def")
                    includeDirs ("$projectDir/../iosApp/Pods/FirebaseFirestore/Firestore/Source/Public", "$projectDir/../iosApp/Pods/FirebaseCore/Firebase/Core/Public")
                    compilerOpts ("-F$projectDir/src/iosMain/c_interop/modules/FirebaseFirestore-${versions.firebaseFirestoreIos}")
                }
            }
        }
    }

    cocoapods {
        // Configure fields required by CocoaPods.
        summary = "Firebase Firestore"
        homepage = "https://github.com/touchlab/FirestoreKMP"
    }
}

apply from: '../gradle/gradle-mvn-mpp-push.gradle'